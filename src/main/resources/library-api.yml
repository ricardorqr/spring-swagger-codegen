openapi: 3.0.2

info:
  title: Book API
  description: Book API Specification.
  termsOfService: http://swagger.io/terms/
  contact:
    email: ricardorqr@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1-SNAPSHOT
servers:
  - url: /v2/api

tags:
  - name: Book
    description: Operations about book
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io

paths:
  /book:

    get:
      tags:
        - Book
      summary: Get all Books
      operationId: getAllBooks
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: System Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Book
      summary: Add a Book
      operationId: addBook
      requestBody:
        description: Book to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: System Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /book/{id}:
    get:
      tags:
        - Book
      summary: Get a Book
      operationId: getBook
      parameters:
        - name: id
          in: path
          description: ID of the book
          required: true
          schema:
            type: integer
          example: "123456"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/BookResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: System Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Book
      summary: Delete a Book
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          description: ID of the book
          required: true
          schema:
            type: integer
          example: "123456"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: System Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Book
      summary: Update a Book
      operationId: updateBook
      parameters:
        - name: id
          in: path
          description: ID of the book
          required: true
          schema:
            type: integer
          example: "123456"
      requestBody:
        description: Book to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: System Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

security:
  - token: []

components:
  schemas:

    BookDTO:
      type: object
      required:
        - title
        - author
      properties:
        title:
          description: The title of the book
          type: string
          example: Java in 21 Days
          minLength: 5
          maxLength: 256
        author:
          description: The author of the book
          type: string
          example: Rico Ribeiro
          minLength: 5
          maxLength: 256

    BookRequest:
      description: A Book request
      type: object
      allOf:
        - $ref: '#/components/schemas/BookDTO'

    BookResponse:
      description: A Book response
      type: object
      allOf:
        - $ref: '#/components/schemas/BookDTO'

    Error:
      type: object
      description: The Error object contains information about the error
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: 666
        message:
          type: string
          example: Any error message
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    token:
      description: Plese, provide the security token
      type: apiKey
      name: token
      in: header

